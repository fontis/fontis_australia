<?php
/**
 * Fontis Australia Extension
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Fontis
 * @package    Fontis_Australia
 * @author     Chris Norton
 * @copyright  Copyright (c) 2014 Fontis Pty. Ltd. (http://www.fontis.com.au)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<?php if (Mage::helper('australia')->isPostcodeAutocompleteEnabled()): ?>
    <script type="text/javascript">
    var citySuggestUrl = '<?php echo $this->helper('australia')->getCitySuggestUrl(); ?>';

    //============ Billing ============//
    var autocomplete_city_billing_indicator = new Element('div', {
        id: 'autocomplete_city_billing_indicator',
        'class': 'fontis-postcode-autocomplete-indicator',
        'style': 'display:none;'
    });
    var autocomplete_city_billing = new Element('div', { id: 'autocomplete_city_billing', 'class': 'fontis-postcode-autocomplete' });

    if ($('billing:city')) {
        $('billing:city').parentNode.appendChild(autocomplete_city_billing_indicator)
            .parentNode.appendChild(autocomplete_city_billing);
    
        function updateAddressBilling(text, item) {
            // Update state and postcode fields
            var id = item.id;
            var tokens = id.split('-');
    
            // Assume item at index 1 is region_id, item at index 3 is postcode
            $('billing:region_id').value = tokens[1];
            $('billing:postcode').value = tokens[3];
        }
    
        // Create the autocompleter and assign it to a variable for future use.
        var completer = new Ajax.Autocompleter("billing:city", "autocomplete_city_billing", citySuggestUrl, {
            afterUpdateElement: updateAddressBilling,
            minChars: 2,
            indicator: 'autocomplete_city_billing_indicator',
            callback: function (inputElement, queryString) {
                return queryString + '&' +  'country=' + $F('billing:country_id');
            }
        });
    }

    //============ Shipping ============//
    var autocomplete_city_shipping_indicator = new Element('div', {
        id: 'autocomplete_city_shipping_indicator',
        'class': 'fontis-postcode-autocomplete-indicator',
        'style': 'display:none;'
    });
    var autocomplete_city_shipping = new Element('div', { id: 'autocomplete_city_shipping', 'class': 'fontis-postcode-autocomplete' });

    if ($('shipping:city')) {
        $('shipping:city').parentNode.appendChild(autocomplete_city_shipping_indicator)
            .parentNode.appendChild(autocomplete_city_shipping);
    
        function updateAddressShipping(text, item) {
            // Update state and postcode fields
            var id = item.id;
            var tokens = id.split('-');
    
            // Assume item at index 1 is region_id, item at index 3 is postcode
            $('shipping:region_id').value = tokens[1];
            $('shipping:postcode').value = tokens[3];
        }
    
        // Create the autocompleter and assign it to a variable for future use.
        var completer = new Ajax.Autocompleter("shipping:city", "autocomplete_city_shipping", citySuggestUrl, {
            afterUpdateElement: updateAddressShipping,
            minChars: 2,
            indicator: 'autocomplete_city_shipping_indicator',
            callback: function (inputElement, queryString) {
                return queryString + '&' +  'country=' + $F('shipping:country_id');
            }
        });
    }
    </script>
<?php endif ?>
